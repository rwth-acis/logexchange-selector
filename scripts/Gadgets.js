// Generated by CoffeeScript 1.7.1
var Envelope, Gadget, MultiGadget,
  __hasProp = {}.hasOwnProperty,
  __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

if (!String.prototype.startsWith) {
  Object.defineProperty(String.prototype, 'startsWith', {
    enumerable: false,
    configurable: false,
    writable: false,
    value: function(searchString, position) {
      position = position || 0;
      return this.lastIndexOf(searchString, position) === position;
    }
  });
}

Gadget = (function() {
  function Gadget(callback) {
    this.callback = callback;
    //gadgets.openapp.connect(this.callback);
    window.onunload = function() {
      //return gadgets.openapp.disconnect();
    };
  }

  Gadget.prototype.publish = function(envelope) {
    return envelope.publish();
  };

  return Gadget;

})();

Envelope = (function() {
  function Envelope(event, type, message, uri, date, sharing, sender, viewer) {
    this.event = event;
    this.type = type != null ? type : "namespaced-properties";
    this.message = message;
    this.uri = uri;
    this.date = date;
    this.sharing = sharing;
    this.sender = sender;
    this.viewer = viewer;
  }

  Envelope.prototype.publish = function() {
    return gadgets.openapp.publish(this);
  };

  return Envelope;

})();

MultiGadget = (function(_super) {
  __extends(MultiGadget, _super);


  /*
  gadget can either be just the name of the gadget or an object.
  If it is an object, it needs at least a "name" attribute.
  The "regex", "connected", "incoming" and "callback" attributes are optional
  If callback is given, messages from this gadget will use this callback.
   */

  function MultiGadget(callback, name, gadgets) {
    var gadget, _i, _len;
    this.name = name;
    this.gadgets = {};
    for (_i = 0, _len = gadgets.length; _i < _len; _i++) {
      gadget = gadgets[_i];
      if (typeof gadget === "string") {
        this.gadgets[gadget] = {
          name: gadget,
          regex: new RegExp(gadget + ".xml$"),
          connected: false,
          incoming: []
        };
      } else if (typeof gadget === "object") {
        if (gadget.regex == null) {
          gadget.regex = new RegExp(gadget.name + ".xml$");
        }
        if (gadget.connected == null) {
          gadget.connected = false;
        }
        if (gadget.incoming == null) {
          gadget.incoming = [];
        }
        this.gadgets[gadget.name] = gadget;
      }
    }
    this.callback = (function(_this) {
      return function(envelope, message) {
        var sender, _ref;
        sender = envelope.sender;
        if (!_this.gadgets[sender]) {
          _ref = _this.gadgets;
          for (name in _ref) {
            gadget = _ref[name];
            if (gadget.regex.test(sender)) {
              _this.gadgets[sender] = gadget;
              break;
            }
          }
        }
        gadget = _this.gadgets[sender];
        if (gadget) {
          switch (envelope.event) {
            case "enter":
              gadget.connected = true;
              return console.log("" + _this.name + ": Gadget " + gadget.name + " connected.");
            case "exit":
              gadget.connected = false;
              return console.log("" + _this.name + ": Gadget " + gadget.name + " disconnected.");
            default:
              if (gadget.callback) {
                return gadget.callback(envelope, message);
              } else {
                return callback(envelope, message, gadget);
              }
          }
        } else {
          return callback(envelope, message, false);
        }
      };
    })(this);
    MultiGadget.__super__.constructor.call(this, this.callback);
  }

  MultiGadget.prototype.connect = function() {
    var envelope;
    envelope = new Envelope("enter");
    return envelope.publish();
  };

  MultiGadget.prototype.disconnect = function() {
    var envelope;
    envelope = new Envelope("exit");
    return envelope.publish();
  };

  return MultiGadget;

})(Gadget);
