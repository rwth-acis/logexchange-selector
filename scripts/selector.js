// Generated by CoffeeScript 1.7.1
var SelectorGadget, active_cmd, active_sessions, add_server, conn, fill_stanzaform, fill_statusform, get_sessions, init_stanzalog, init_ui, log_handler, pending, read_stanzaform, read_statusform, session_added, stop_session, test_logexchange, test_logexchange_ui, verified_servers, xmpp_connect, xmpp_disconnect,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

SelectorGadget = (function(_super) {
    __extends(SelectorGadget, _super);

    conn = null;

    verified_servers = {};

    pending = {};

    active_cmd = null;

    active_sessions = {};

    function SelectorGadget(callback) {
        var gadgets;
        gadgets = ["StatGadget", "NetworkGadget"];
        SelectorGadget.__super__.constructor.call(this, callback, "SelectorGadget", gadgets);
    }

    SelectorGadget.prototype.init = function() {
        var env;
        env = new Envelope("enter");
        return env.publish();
    };

    SelectorGadget.prototype.openAppCallback = function(envelope, message) {
        if (/StatGadget.xml$/.test(envelope.sender) || /SelectorGadget.xml$/.test(envelope.sender) || /explorerGadget.xml$/.test(envelope.sender)) {
            switch (envelope.event) {
                case "error":
                    return console.log("Received error message from statistics gadget but the type is unknown: " + envelope.message["http://purl.org/dc/terms/type"]);
                case "enter":
                    return console.log("OpenApp: entered", envelope, message);
                case "exit":
                    return console.log("OpenApp: exited");
                default:
                    return console.log("Received unknown event message from gadget: " + envelope.sender + " Message: " + envelope.event);
            }
        } else {
            return console.log("Received (MasterGadget) unknown event message from unknown sender: " + envelope.sender + " Event: " + envelope.event + " Message: " + envelope.message);
        }
    };

    SelectorGadget.prototype.gadget_init = function() {
        var gadget;
        gadget = new SelectorGadget(function(envelope, message, gadget) {});
        console.log("SelectorGadget: ", gadget);
        this.init_ui();
        return gadget.connect();
    };

    SelectorGadget.prototype.add_server = function(server) {
        verified_servers[server] = true;
        $("div#ServerDiv select#serverChoose").append($('<option/>', {
            value: server,
            text: server
        })).val(server);
        $("#StatusButton").prop("disabled", false);
        $("#StanzaButton").prop("disabled", false);
        return SelectorGadget.prototype.get_sessions(server);
    };

    SelectorGadget.prototype.log_handler = function(log) {
        var env;
        if ((!active_sessions[log.id]) && (!pending[log.id])) {
            pending[log.id] = true;
            console.log(log.id, active_sessions[log.id]);
            SelectorGadget.prototype.get_sessions(Strophe.getDomainFromJid(log.subject));
            SelectorGadget.prototype.get_sessions(Strophe.getDomainFromJid(log.object));
        }
        env = new Envelope("logexchange_" + log.module, void 0, log);
        //env.publish();
        window.y.share.log.push([env]);
        //console.log("Published: ", env);
        return true;
    };

    SelectorGadget.prototype.session_added = function(type, id, server) {
        if (!active_sessions[id]) {
            $("#SessionsDiv fieldset").append("<div id=\"session_" + id + "\">\n  <label style=\"width: 70%;\" for=\"stop_" + id + "\">" + server + " - " + type + " - " + id + "</label>\n  <!-- <button type=\"button\" id=\"vis_" + id + "\" onclick=\"visualize('" + id + "');\">Visualize</button>\n  <button type=\"button\" id=\"reconf_" + id + "\" onclick=\"reconf_session('" + id + "');\">Reconfigure</button>-->\n  <button type=\"button\" id=\"stop_" + id + "\" onclick=\"SelectorGadget.prototype.stop_session('" + server + "', '" + id + "');\">Stop</button>\n</div>");
            active_sessions[id] = type;
            return pending[id] = false;
        } else {
            return $("#SessionsDiv fieldset #session_" + id).html("<label style=\"width: 70%;\" for=\"stop_" + id + "\">" + server + " - " + type + " - " + id + "</label>\n<!-- <button type=\"button\" id=\"vis_" + id + "\" onclick=\"visualize('" + id + "');\">Visualize</button>\n<button type=\"button\" id=\"reconf_" + id + "\" onclick=\"reconf_session('" + id + "');\">Reconfigure</button>-->\n<button type=\"button\" id=\"stop_" + id + "\" onclick=\"SelectorGadget.prototype.stop_session('" + server + "', '" + id + "');\">Stop</button>");
        }
    };

    SelectorGadget.prototype.stop_session = function(server, id) {
        return conn.logexchange.stop_session(server, id, function() {
            return $("#session_" + id).remove();
        });
    };

    SelectorGadget.prototype.get_sessions = function(server) {
        var cb;
        if (!server) {
            server = conn.domain;
        }
        cb = function(sessions, types) {
            var session, typemapping, _i, _len;
            if (!types) {
                return;
            }
            typemapping = {
                "stanza": "stanzalog",
                "status": "statuslog"
            };
            var i;
            for (_i = 0, _len = sessions.length; _i < _len; _i++) {
                session = sessions[_i];
                SelectorGadget.prototype.session_added(typemapping[types[_i]], session, server);
            }
        };
        return conn.logexchange.get_sessions(server, cb);
    };

    SelectorGadget.prototype.test_logexchange = function(server, callback, err) {
        return conn.disco.info(server, function(stanza) {
            if ($(stanza).find("feature[var='urn:xmpp:logexchange']").length) {
                return conn.disco.items(server, 'http://jabber.org/protocol/commands', function(stanza) {
                    if ($(stanza).find("item[node='logexchange/stanza']").length) {
                        return callback();
                    } else {
                        return err();
                    }
                });
            } else {
                return err();
            }
        });
    };

    SelectorGadget.prototype.test_logexchange_ui = function() {
        var server;
        server = $("#addServer").val();
        if (verified_servers[server]) {
            return;
        }
        return SelectorGadget.prototype.test_logexchange(server, function() {
            $("button#addButton");
            return SelectorGadget.prototype.add_server(server);
        }, function() {
            $("button#addButton").prop("disabled", true);
            return alert("Server does offer the logexchange protocol to your JID.");
        });
    };

    SelectorGadget.prototype.init_stanzalog = function() {
        var server;
        server = $("#addServer").val();
        return conn.logexchange.request_stanzalogs(server, success, error)(function() {
            return XXX;
        });
    };

    SelectorGadget.prototype.xmpp_connect = function() {
        var jid, password, proxyurl;
        jid = Strophe.getBareJidFromJid($('#loginJID').val()) + "/SelectorGadget";
        password = $('#loginPassword').val();
        proxyurl = "ws://localhost:5280/xmpp-websocket";
        //proxyurl = "ws://" + (Strophe.getDomainFromJid(jid)) + ":5280/xmpp-websocket";
        conn = new Strophe.Connection(proxyurl);
        conn.connect(jid, password, function(status) {
            var stats;
            stats = {
                0: "ERROR",
                1: "CONNECTING",
                2: "CONNFAIL",
                3: "AUTHENTICATING",
                4: "AUTHFAIL",
                5: "CONNECTED",
                6: "DISCONNECTED",
                7: "DISCONNECTING",
                8: "ATTACHED"
            };
            console.log("XMPP Status change: " + stats[status]);
            if (status === Strophe.Status.CONNECTED) {
                return SelectorGadget.prototype.xmpp_connected();
                //return $(document).trigger('xmpp-connected');
            } else if (status === Strophe.Status.DISCONNECTED) {
                return $(document).trigger('xmpp-disconnected');
            }
        });
        return window.conn = conn;
    };

    SelectorGadget.prototype.xmpp_disconnect = function() {
        window.conn.disconnect();
        $("div#ServerDiv").hide();
        $("div#SessionsDiv").hide();
        return $("div#loginDiv").show();
    };

    SelectorGadget.prototype.xmpp_connected = function(ev, data) {
        var legend, sdiv, unload;
        unload = window.unload;
        window.onunload = function() {
            conn.disconnect();
            return unload();
        };
        conn.eventlog.addHandler(SelectorGadget.prototype.log_handler);
        sdiv = $("div#ServerDiv");
        legend = sdiv.find("#ServerForm legend");
        legend.text("Server Selector - connected as " + (Strophe.getBareJidFromJid(conn.jid)));
        $("#addServer").val(conn.domain);
        SelectorGadget.prototype.test_logexchange_ui();
        $("div#loginDiv").hide();
        sdiv.show();
        return $("div#SessionsDiv").show();
    };

    SelectorGadget.prototype.init_ui = function() {
        var self = this;
        $("#loginButton").click(function() {
            self.xmpp_connect();
        });

        $("#logoutButton").click(function() {
            self.xmpp_disconnect();
        });

        $("input#addServer").keyup(function(ev) {
            if (ev.target.value.length > 0) {
                return $("#addButton").prop("disabled", false);
            } else {
                return $("#addButton").prop("disabled", true);
            }
        });
        $("button#addButton").click(self.test_logexchange_ui);
        $("select#serverChoose").change(function(ev) {
            $("#StatusButton").prop("disabled", false);
            return $("#StanzaButton").prop("disabled", false);
        });
        $("#StatusButton").click(function() {
            var server;
            return server = $("select#serverChoose").val();
        });
        $("#StanzaButton").click(function() {
            var server;
            server = $("select#serverChoose").val();
            return active_cmd = conn.logexchange.new_stanzalog(server, function(stanza, cmd) {
                self.fill_stanzaform(cmd);
                $("div#ServerDiv").hide();
                return $("div#StanzaFormDiv").show();
            }, function() {
                return console.log(arguments);
            });
        });
        $("#StatusButton").click(function() {
            var server;
            server = $("select#serverChoose").val();
            return active_cmd = conn.logexchange.new_statuslog(server, function(stanza, cmd) {
                self.fill_statusform(cmd);
                $("div#ServerDiv").hide();
                return $("div#StatusFormDiv").show();
            }, function() {
                return console.log(arguments);
            });
        });
        $("#cancelStanza").click(function() {
            $("div#StanzaFormDiv").hide();
            return $("div#ServerDiv").show();
        });
        $("#cancelStatus").click(function() {
            $("div#StatusFormDiv").hide();
            return $("div#ServerDiv").show();
        });
        $("#sendStanza").click(function() {
            var f, logid, response_form, _i, _len, _ref;
            response_form = self.read_stanzaform(active_cmd);
            logid = null;
            _ref = response_form.fields;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                f = _ref[_i];
                if (f["var"] === "logid") {
                    logid = f.values[0];
                    break;
                }
            }
            active_cmd.complete({
                responseForm: response_form,
                success: function(stanza, cmd) {
                    console.log(this, active_cmd);
                    return self.session_added("stanzalog", logid, cmd.jid);
                }
            });
            $("div#StanzaFormDiv").hide();
            return $("div#ServerDiv").show();
        });
        $("#sendStatus").click(function() {
            var f, logid, response_form, _i, _len, _ref;
            response_form = self.read_statusform(active_cmd);
            logid = null;
            _ref = response_form.fields;
            for (_i = 0, _len = _ref.length; _i < _len; _i++) {
                f = _ref[_i];
                if (f["var"] === "logid") {
                    logid = f.values[0];
                    break;
                }
            }
            active_cmd.complete({
                responseForm: response_form,
                success: function(stanza, cmd) {
                    return self.session_added("statuslog", logid, cmd.jid);
                }
            });
            $("div#StatusFormDiv").hide();
            return $("div#ServerDiv").show();
        });
        $("#statistictsAll").click(function() {
            return $("#status_stats option").prop("selected", true);
        });
        return $("#statistictsNone").click(function() {
            return $("#status_stats option").prop("selected", false);
        });
    };

    SelectorGadget.prototype.fill_statusform = function(cmd) {
        var field, fields, form, item, option, sform, value, _i, _j, _len, _len1, _ref, _results;
        form = cmd.form;
        fields = form.fields;
        sform = $("form#StatusForm");
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            switch (field["var"]) {
                case "statustype":
                    item = sform.find("#status_stats");
                    item.html("");
                    _ref = field.options;
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        option = _ref[_j];
                        item.append($('<option/>', {
                            value: option.value,
                            text: option.label
                        }));
                    }
                    _results.push((function() {
                        var _k, _len2, _ref1, _results1;
                        _ref1 = field.values;
                        _results1 = [];
                        for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                            value = _ref1[_k];
                            _results1.push(item.find("option[value='" + value + "']").prop("selected", true));
                        }
                        return _results1;
                    })());
                    break;
                case "onupdate":
                    item = sform.find("#status_onupdate");
                    _results.push(item.prop("checked", false));
                    break;
                case "interval":
                    _results.push(sform.find("#status_interval").val(field.values[0]));
                    break;
                default:
                    _results.push(void 0);
            }
        }
        return _results;
    };

    SelectorGadget.prototype.read_statusform = function(cmd) {
        var field, fields, form, item, new_fields, option, response_form, sform, t, v, values, _i, _j, _len, _len1, _ref;
        form = cmd.form;
        fields = form.fields;
        sform = $("form#StatusForm");
        new_fields = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            v = field["var"];
            t = field.type;
            values = [];
            switch (v) {
                case "logid":
                    values = field.values;
                    break;
                case "statustype":
                    item = sform.find("#status_stats");
                    _ref = field.options;
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        option = _ref[_j];
                        if (item.find("option[value='" + option.value + "']").prop("selected")) {
                            values.push(option.value);
                        }
                    }
                    break;
                case "onupdate":
                    item = sform.find("#status_onupdate");
                    if (item.prop("checked")) {
                        values = ["1"];
                    } else {
                        values = ["0"];
                    }
                    break;
                case "interval":
                    values = [sform.find("#status_interval").val() || ""];
            }
            new_fields.push(new Strophe.x.Field({
                "var": v,
                type: t,
                values: values
            }));
        }
        response_form = new Strophe.x.Form({
            type: "submit",
            fields: new_fields
        });
        return response_form;
    };

    SelectorGadget.prototype.fill_stanzaform = function(cmd) {
        var field, fields, form, input, item, jids, option, sform, stanzatypes, value, _i, _j, _k, _l, _len, _len1, _len2, _len3, _ref, _ref1, _ref2, _results;
        form = cmd.form;
        fields = form.fields;
        sform = $("form#StanzaForm");
        _results = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            switch (field["var"]) {
                case "stanzatype":
                    stanzatypes = sform.find("select#stanzatypes");
                    stanzatypes.find("option").each(function(index) {
                        return $(this).prop("selected", false);
                    });
                    _results.push((function() {
                        var _j, _len1, _ref, _results1;
                        _ref = field.values;
                        _results1 = [];
                        for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                            value = _ref[_j];
                            _results1.push(stanzatypes.find("#stanzatype_" + value).prop("selected", true));
                        }
                        return _results1;
                    })());
                    break;
                case "jid":
                    jids = sform.find("#stanza_jids");
                    jids.text("");
                    _ref = field.values;
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        value = _ref[_j];
                        jids.append("" + value + "\n");
                    }
                    _results.push(jids.text(jids.text().trim()));
                    break;
                case "conditions":
                case "direction":
                    item = sform.find("#stanza_" + field["var"]);
                    item.html("");
                    _ref1 = field.options;
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                        option = _ref1[_k];
                        item.append($('<option/>', {
                            value: option.value,
                            text: option.label
                        }));
                    }
                    _results.push((function() {
                        var _l, _len3, _ref2, _results1;
                        _ref2 = field.values;
                        _results1 = [];
                        for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                            value = _ref2[_l];
                            _results1.push(item.find("option[value='" + value + "']").prop("selected", true));
                        }
                        return _results1;
                    })());
                    break;
                case "input":
                    input = sform.find("#stanza_queries");
                    input.text("");
                    _ref2 = field.values;
                    for (_l = 0, _len3 = _ref2.length; _l < _len3; _l++) {
                        value = _ref2[_l];
                        input.append("" + value + "\n");
                    }
                    _results.push(input.text(jids.text().trim()));
                    break;
                case "top":
                case "private":
                case "iqresponse":
                    item = sform.find("#stanza_" + field["var"]);
                    if (field.values[0] === "1") {
                        _results.push(item.prop("checked", true));
                    } else {
                        _results.push(item.prop("checked", false));
                    }
                    break;
                case "output":
                    _results.push(sform.find("#stanza_output").val(field.values[0]));
                    break;
                default:
                    _results.push(void 0);
            }
        }
        return _results;
    };

    SelectorGadget.prototype.read_stanzaform = function(cmd) {
        var field, fields, form, input, item, jids, new_fields, option, response_form, sform, stanzatypes, t, txt, v, values, _i, _j, _k, _len, _len1, _len2, _ref, _ref1;
        form = cmd.form;
        fields = form.fields;
        sform = $("form#StanzaForm");
        new_fields = [];
        for (_i = 0, _len = fields.length; _i < _len; _i++) {
            field = fields[_i];
            v = field["var"];
            t = field.type;
            values = [];
            switch (v) {
                case "logid":
                    values = field.values;
                    break;
                case "stanzatype":
                    stanzatypes = sform.find("select#stanzatypes");
                    _ref = field.options;
                    for (_j = 0, _len1 = _ref.length; _j < _len1; _j++) {
                        option = _ref[_j];
                        if (stanzatypes.find("#stanzatype_" + option.value).prop("selected")) {
                            values.push(option.value);
                        }
                    }
                    break;
                case "jid":
                    jids = sform.find("#stanza_jids");
                    txt = jids.text();
                    if (txt.trim() !== "") {
                        values = txt.split('\n');
                    }
                    break;
                case "conditions":
                case "direction":
                    item = sform.find("#stanza_" + field["var"]);
                    _ref1 = field.options;
                    for (_k = 0, _len2 = _ref1.length; _k < _len2; _k++) {
                        option = _ref1[_k];
                        if (item.find("option[value='" + option.value + "']").prop("selected")) {
                            values.push(option.value);
                        }
                    }
                    break;
                case "input":
                    input = sform.find("#stanza_queries");
                    txt = input.text();
                    if (txt.trim() !== "") {
                        values = txt.split('\n');
                    }
                    break;
                case "top":
                case "private":
                case "iqresponse":
                    item = sform.find("#stanza_" + field["var"]);
                    if (item.prop("checked")) {
                        values = ["1"];
                    } else {
                        values = ["0"];
                    }
                    break;
                case "output":
                    values = [sform.find("#stanza_output").val()];
            }
            new_fields.push(new Strophe.x.Field({
                "var": v,
                type: t,
                values: values
            }));
        }
        response_form = new Strophe.x.Form({
            type: "submit",
            fields: new_fields
        });
        return response_form;
    };

    return SelectorGadget;

})(MultiGadget);
